import { ChatCompletion, ChatCompletionChunk } from "openai/resources/chat";
import { ChatCompletionContentPart, ChatCompletionCreateParamsBase, ChatCompletionMessageParam } from "openai/resources/chat/completions";
import { Stream } from "openai/streaming";
export declare type ContentPart = ChatCompletionContentPart;
export declare type Content = string | Array<ChatCompletionContentPart>;
export declare type Message = ChatCompletionMessageParam;
export declare type PromptPayload = Pick<ChatCompletionCreateParamsBase, "messages" | "stream"> & {
    chainId?: string;
    privateKey?: string;
    name?: string;
    description?: string;
};
export declare type PromptStringResponse = string;
export declare type PromptResponse = ChatCompletion;
export declare type PromptChunkResponse = ChatCompletionChunk;
export declare type PromptReturnType = Promise<PromptStringResponse> | Promise<PromptResponse> | Promise<Stream<PromptChunkResponse>>;
export declare type PromptFunction = (payload: PromptPayload) => PromptReturnType;
export declare type RequestPromptPayload = PromptPayload & {
    id?: string;
    ping?: boolean;
};
export declare type Base64Result = {
    type: string;
    base64: string;
    fileName: string;
};
export declare type ProviderInfo = {
    id: string;
    date_created: string;
    date_modified: string;
    modified_user_id: string;
    created_user_id: string;
    date_deleted: string;
    user_address: string;
    deposit_address: string;
    status: number;
    plan_type: string;
    subscription_pricing: number;
    api_key: string;
    consumed_amount: number;
    balance_remaining: number;
};
export declare type Network = {
    eai_contract_address: string;
    explorer_url: string;
    network_id: string;
};
export declare type WalletData = {
    id: string;
    date_created: string;
    date_modified: string;
    modified_user_id: string;
    created_user_id: string;
    date_deleted: string;
    user_address: string;
    deposit_address: string;
    subscription_status: number;
    subscription_plan_type: string;
    subscription_pricing: number;
    api_key: string;
    consumed_amount: number;
    balance_remaining: number;
    amount: number;
    token_symbol: string;
    networks: Network[];
};
