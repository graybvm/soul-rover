/// <reference types="node" />
import path from "path";
import { Base64Result, Message } from "../types";
export declare const getBaseFromBase64: (type: string, messages: Message[]) => Base64Result[];
export declare const parseDataUrl: (dataUrl: string) => {
    mimeType: string;
    base64: string;
    buffer: Buffer;
} | null;
/**
 * Creates a file from base64 data
 * @param base64 - The base64 string (without the data:image/png;base64, prefix)
 * @param fileName - Name for the created file
 * @param directory - Directory to store the file (default: 'tmp')
 * @param fileType - Optional MIME type (e.g., 'image/png')
 * @returns Promise with the full path to the created file
 */
export declare const createFileFromBase64: (base64: string, fileName: string, directory?: string) => Promise<string>;
/**
 * Creates files from the results of getBaseFromBase64
 * @param results - Array of Base64Result objects
 * @param directory - Directory to store the files (default: 'tmp')
 * @returns Promise with array of file paths
 */
export declare const createFilesFromBase64Results: (results: Base64Result[], directory?: string) => Promise<string[]>;
/**
 * Deletes a file if it exists
 * @param filePath - Path to the file to delete
 * @returns Promise<boolean> - True if file was deleted, false if file didn't exist
 */
export declare const deleteFile: (filePath: string) => Promise<boolean>;
/**
 * Deletes multiple files
 * @param filePaths - Array of file paths to delete
 * @returns Promise<{deleted: string[], notFound: string[], failed: {path: string, error: string}[]}>
 */
export declare const deleteFiles: (filePaths: string[]) => Promise<{
    deleted: string[];
    notFound: string[];
    failed: Array<{
        path: string;
        error: string;
    }>;
}>;
/**
 * Cleans up temporary files in a directory
 * @param directory - Directory to clean
 * @param maxAge - Maximum age of files to keep (in milliseconds)
 * @returns Promise with deletion results
 */
export declare const cleanupTempFiles: (directory?: string, maxAge?: number) => Promise<{
    deleted: string[];
    notFound: string[];
    failed: Array<{
        path: string;
        error: string;
    }>;
}>;
/**
 * Checks if a string is base64 encoded
 * @param str - The string to check
 * @param strict - Whether to perform strict validation (including decoding test)
 * @returns boolean - True if the string is base64 encoded, false otherwise
 */
export declare const isBase64: (str: string, strict?: boolean) => boolean;
/**
 * Checks if a string is a data URL
 * @param str - The string to check
 * @returns boolean - True if the string is a data URL, false otherwise
 */
export declare const isDataUrl: (str: string) => boolean;
/**
 * Detects if a string is base64 or data URL and extracts base64 content
 * @param input - The string to check (could be base64 encoded string or data URL)
 * @returns Object with type and content, or null if not recognized
 */
export declare const parseBase64Input: (input: string) => {
    type: "base64" | "dataUrl";
    content: string;
    mimeType?: string;
} | null;
